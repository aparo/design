// Copyright (C) 2014-2019 Anduin Transactions Inc.

package design.anduin.style

// scalastyle:off number.of.methods
private[style] final case class Padding(classes: List[String] = List.empty) {
  def all0: Style = new Style(classes :+ "p-0")
  def all4: Style = new Style(classes :+ "p-4")
  def all8: Style = new Style(classes :+ "p-8")
  def all12: Style = new Style(classes :+ "p-12")
  def all16: Style = new Style(classes :+ "p-16")
  def all20: Style = new Style(classes :+ "p-20")
  def all24: Style = new Style(classes :+ "p-24")
  def all32: Style = new Style(classes :+ "p-32")
  def all40: Style = new Style(classes :+ "p-40")
  def all48: Style = new Style(classes :+ "p-48")
  def allAuto: Style = new Style(classes :+ "p-auto")

  def hor0: Style = new Style(classes :+ "px-0")
  def hor4: Style = new Style(classes :+ "px-4")
  def hor8: Style = new Style(classes :+ "px-8")
  def hor12: Style = new Style(classes :+ "px-12")
  def hor16: Style = new Style(classes :+ "px-16")
  def hor20: Style = new Style(classes :+ "px-20")
  def hor24: Style = new Style(classes :+ "px-24")
  def hor32: Style = new Style(classes :+ "px-32")
  def hor40: Style = new Style(classes :+ "px-40")
  def hor48: Style = new Style(classes :+ "px-48")
  def horAuto: Style = new Style(classes :+ "px-auto")

  def ver0: Style = new Style(classes :+ "py-0")
  def ver4: Style = new Style(classes :+ "py-4")
  def ver8: Style = new Style(classes :+ "py-8")
  def ver12: Style = new Style(classes :+ "py-12")
  def ver16: Style = new Style(classes :+ "py-16")
  def ver20: Style = new Style(classes :+ "py-20")
  def ver24: Style = new Style(classes :+ "py-24")
  def ver32: Style = new Style(classes :+ "py-32")
  def ver40: Style = new Style(classes :+ "py-40")
  def ver48: Style = new Style(classes :+ "py-48")
  def verAuto: Style = new Style(classes :+ "py-auto")

  def top0: Style = new Style(classes :+ "pt-0")
  def top4: Style = new Style(classes :+ "pt-4")
  def top8: Style = new Style(classes :+ "pt-8")
  def top12: Style = new Style(classes :+ "pt-12")
  def top16: Style = new Style(classes :+ "pt-16")
  def top20: Style = new Style(classes :+ "pt-20")
  def top24: Style = new Style(classes :+ "pt-24")
  def top32: Style = new Style(classes :+ "pt-32")
  def top40: Style = new Style(classes :+ "pt-40")
  def top48: Style = new Style(classes :+ "pt-48")
  def topAuto: Style = new Style(classes :+ "pt-auto")

  def right0: Style = new Style(classes :+ "pr-0")
  def right4: Style = new Style(classes :+ "pr-4")
  def right8: Style = new Style(classes :+ "pr-8")
  def right12: Style = new Style(classes :+ "pr-12")
  def right16: Style = new Style(classes :+ "pr-16")
  def right20: Style = new Style(classes :+ "pr-20")
  def right24: Style = new Style(classes :+ "pr-24")
  def right32: Style = new Style(classes :+ "pr-32")
  def right40: Style = new Style(classes :+ "pr-40")
  def right48: Style = new Style(classes :+ "pr-48")
  def rightAuto: Style = new Style(classes :+ "pr-auto")

  def bottom0: Style = new Style(classes :+ "pb-0")
  def bottom4: Style = new Style(classes :+ "pb-4")
  def bottom8: Style = new Style(classes :+ "pb-8")
  def bottom12: Style = new Style(classes :+ "pb-12")
  def bottom16: Style = new Style(classes :+ "pb-16")
  def bottom20: Style = new Style(classes :+ "pb-20")
  def bottom24: Style = new Style(classes :+ "pb-24")
  def bottom32: Style = new Style(classes :+ "pb-32")
  def bottom40: Style = new Style(classes :+ "pb-40")
  def bottom48: Style = new Style(classes :+ "pb-48")
  def bottomAuto: Style = new Style(classes :+ "pb-auto")

  def left0: Style = new Style(classes :+ "pl-0")
  def left4: Style = new Style(classes :+ "pl-4")
  def left8: Style = new Style(classes :+ "pl-8")
  def left12: Style = new Style(classes :+ "pl-12")
  def left16: Style = new Style(classes :+ "pl-16")
  def left20: Style = new Style(classes :+ "pl-20")
  def left24: Style = new Style(classes :+ "pl-24")
  def left32: Style = new Style(classes :+ "pl-32")
  def left40: Style = new Style(classes :+ "pl-40")
  def left48: Style = new Style(classes :+ "pl-48")
  def leftAuto: Style = new Style(classes :+ "pl-auto")
}
// scalastyle:on number.of.methods
