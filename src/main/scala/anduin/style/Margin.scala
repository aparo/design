// Copyright (C) 2014-2019 Anduin Transactions Inc.

package anduin.style

// scalastyle:off number.of.methods
private[style] final case class Margin(classes: List[String] = List.empty) {
  def all0: Style = new Style(classes :+ "m-0")
  def all4: Style = new Style(classes :+ "m-4")
  def all8: Style = new Style(classes :+ "m-8")
  def all12: Style = new Style(classes :+ "m-12")
  def all16: Style = new Style(classes :+ "m-16")
  def all20: Style = new Style(classes :+ "m-20")
  def all24: Style = new Style(classes :+ "m-24")
  def all32: Style = new Style(classes :+ "m-32")
  def all40: Style = new Style(classes :+ "m-40")
  def all48: Style = new Style(classes :+ "m-48")
  def allAuto: Style = new Style(classes :+ "m-auto")

  def hor0: Style = new Style(classes :+ "mx-0")
  def hor4: Style = new Style(classes :+ "mx-4")
  def hor8: Style = new Style(classes :+ "mx-8")
  def hor12: Style = new Style(classes :+ "mx-12")
  def hor16: Style = new Style(classes :+ "mx-16")
  def hor20: Style = new Style(classes :+ "mx-20")
  def hor24: Style = new Style(classes :+ "mx-24")
  def hor32: Style = new Style(classes :+ "mx-32")
  def hor40: Style = new Style(classes :+ "mx-40")
  def hor48: Style = new Style(classes :+ "mx-48")
  def horAuto: Style = new Style(classes :+ "mx-auto")

  def ver0: Style = new Style(classes :+ "my-0")
  def ver4: Style = new Style(classes :+ "my-4")
  def ver8: Style = new Style(classes :+ "my-8")
  def ver12: Style = new Style(classes :+ "my-12")
  def ver16: Style = new Style(classes :+ "my-16")
  def ver20: Style = new Style(classes :+ "my-20")
  def ver24: Style = new Style(classes :+ "my-24")
  def ver32: Style = new Style(classes :+ "my-32")
  def ver40: Style = new Style(classes :+ "my-40")
  def ver48: Style = new Style(classes :+ "my-48")
  def verAuto: Style = new Style(classes :+ "my-auto")

  def top0: Style = new Style(classes :+ "mt-0")
  def top4: Style = new Style(classes :+ "mt-4")
  def top8: Style = new Style(classes :+ "mt-8")
  def top12: Style = new Style(classes :+ "mt-12")
  def top16: Style = new Style(classes :+ "mt-16")
  def top20: Style = new Style(classes :+ "mt-20")
  def top24: Style = new Style(classes :+ "mt-24")
  def top32: Style = new Style(classes :+ "mt-32")
  def top40: Style = new Style(classes :+ "mt-40")
  def top48: Style = new Style(classes :+ "mt-48")
  def topAuto: Style = new Style(classes :+ "mt-auto")

  def right0: Style = new Style(classes :+ "mr-0")
  def right4: Style = new Style(classes :+ "mr-4")
  def right8: Style = new Style(classes :+ "mr-8")
  def right12: Style = new Style(classes :+ "mr-12")
  def right16: Style = new Style(classes :+ "mr-16")
  def right20: Style = new Style(classes :+ "mr-20")
  def right24: Style = new Style(classes :+ "mr-24")
  def right32: Style = new Style(classes :+ "mr-32")
  def right40: Style = new Style(classes :+ "mr-40")
  def right48: Style = new Style(classes :+ "mr-48")
  def rightAuto: Style = new Style(classes :+ "mr-auto")

  def bottom0: Style = new Style(classes :+ "mb-0")
  def bottom4: Style = new Style(classes :+ "mb-4")
  def bottom8: Style = new Style(classes :+ "mb-8")
  def bottom12: Style = new Style(classes :+ "mb-12")
  def bottom16: Style = new Style(classes :+ "mb-16")
  def bottom20: Style = new Style(classes :+ "mb-20")
  def bottom24: Style = new Style(classes :+ "mb-24")
  def bottom32: Style = new Style(classes :+ "mb-32")
  def bottom40: Style = new Style(classes :+ "mb-40")
  def bottom48: Style = new Style(classes :+ "mb-48")
  def bottomAuto: Style = new Style(classes :+ "mb-auto")

  def left0: Style = new Style(classes :+ "ml-0")
  def left4: Style = new Style(classes :+ "ml-4")
  def left8: Style = new Style(classes :+ "ml-8")
  def left12: Style = new Style(classes :+ "ml-12")
  def left16: Style = new Style(classes :+ "ml-16")
  def left20: Style = new Style(classes :+ "ml-20")
  def left24: Style = new Style(classes :+ "ml-24")
  def left32: Style = new Style(classes :+ "ml-32")
  def left40: Style = new Style(classes :+ "ml-40")
  def left48: Style = new Style(classes :+ "ml-48")
  def leftAuto: Style = new Style(classes :+ "ml-auto")
}
// scalastyle:on number.of.methods
